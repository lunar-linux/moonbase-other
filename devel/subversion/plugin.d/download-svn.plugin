#!/bin/bash
############################################################
#                                                          #
# download-svn.plugin - download SVN urls                  #
#                                                          #
############################################################
#                                                          #
# Copyright 2005 by Auke Kok under GPLv2                   #
#                                                          #
############################################################

# valid SVN urls are:
# svn://
# svn+http:// (will be transformed to http://)
# svn+https:// (will be transformed to https://)
# svn+ssh://

plugin_source_download_svn() {
  # check if we can handle this URL format
  if [ "${1:0:6}" != "svn://" -a "${1:0:11}" != "svn+http://" -a "${1:0:12}" != "svn+https://" -a "${1:0:10}" != "svn+ssh://" ] ; then
    return 2
  fi
  debug_msg "plugin_source_needrefresh_svn($@)"

  if ! module_installed subversion ; then
    # full stop: we need to make sure the user sees this error:
    message "${PROBLEM_COLOR}! Cannot fetch SVN sources without \"subversion\" installed${DEFAULT_COLOR}"
    exit 1
  fi

  SVN_URL=$(echo $1 | cut -d: -f1-2)
  # translate svn+http(s) urls:
  if [ "${SVN_URL:0:8}" == "svn+http" ]; then
    SVN_URL="${SVN_URL:4}"
  fi

  message  "${MESSAGE_COLOR}Downloading SVN module for module ${MODULE_COLOR}${MODULE}${DEFAULT_COLOR}"

  SBASE=$(source_basename $2)
  mk_source_dir $TMPDIR/$MODULE-$VERSION
  cd $TMPDIR/$MODULE-$VERSION

  if [ -f "$3/$2" ] ; then
    verbose_msg "Extracting local SVN copy"
    CD=$(pwd -P)
    if ! unpack $2 ; then
      message "${PROBLEM_COLOR}Warning: bad local SVN copy, checking out fresh SVN copy${DEFAULT_COLOR}"

      rm_source_dir $TMPDIR/$MODULE-$VERSION
      mk_source_dir $TMPDIR/$MODULE-$VERSION
    fi
    cd $CD
  fi

  NUM_RETRY=${NUM_RETRY:-5}
  if [ "$NUM_RETRY" -eq 0 ]; then
      NUM_RETRY=1000
  fi

  for (( TRY=1 ; $TRY<$NUM_RETRY+1 ; TRY++ )) ; do
    if [ -d "$SBASE/.svn" ] ; then
      cd $SBASE
      verbose_msg "[${TRY}] svn up"
      svn up && GOT_SVN="yes" 
      cd ${CD}
    else
      verbose_msg "[${TRY}] svn co $SVN_URL $SBASE"
      svn co $SVN_URL $SBASE && GOT_SVN="yes"
    fi

    if [ "$?" == "0" ] ; then
      break
    fi

    sleep 2
  done

  if [ "$GOT_SVN" == "yes" ] ; then
    message "${MESSAGE_COLOR}Creating ${FILE_COLOR}$2${DEFAULT_COLOR}"
    tar cjf $3/$2 $SBASE
  else
    activity_log "lget" "$MODULE" "$VERSION" "failed" "Could not fetch \"$1\""
  fi

  cd $TMPDIR
  rm_source_dir $TMPDIR/$MODULE-$VERSION

}


plugin_source_needrefresh_svn() {
  # check if we can handle this URL format
  if [ "${1:0:6}" != "svn://" -a "${1:0:11}" != "svn+http://" -a "${1:0:12}" != "svn+https://" -a "${1:0:10}" != "svn+ssh://" ] ; then
    return 2
  fi
  debug_msg "plugin_source_needrefresh_svn($@)"

  if [ ! -f $3/$2 ]; then
    return 0
  fi

  SVN_THRESHOLD=${SVN_THRESHOLD:-10}
  if (( "SVN_THRESHOLD" > 0 )) ; then
    if [ "$(find $3/$2 -amin +$SVN_THRESHOLD)" == "$3/$2" ] ; then
      # it is older:
      return 0
    else
      message "${MESSAGE_COLOR}SVN update not required for \"${FILE_COLOR}$(basename $2)${DEFAULT_COLOR}${CYAN}\" (less than $SVN_THRESHOLD minutes old)${DEFAULT_COLOR}"
      # now we can send a FAIL so the next plugins are skipped:
      return 1
    fi
  else
    # always return true if threshhold is zero
    return 0
  fi
}


plugin_register SOURCE_DOWNLOAD plugin_source_download_svn
plugin_register SOURCE_NEEDREFRESH plugin_source_needrefresh_svn

