#!/bin/bash
#############################################################
#                                                           #
# bootloader-grub.plugin - plugin that performs grub        #
#                          maintenance                      #
#                                                           #
#############################################################
#                                                           #
# Copyright 2005 by Auke Kok under GPLv2                    #
# Copyright 2005 by Jaime Buffery under GPLv2               #
#                                                           #
#############################################################


unmap_device()
{
    local DEVICE
    for DEVICE in $(ls -1d /dev/[hs]d* 2> /dev/null); do
        if [ "$(readlink -f $DEVICE)" == "$(readlink -f $1)" ]; then
            echo $DEVICE
            return 0
        fi
    done
    echo $1
    return 0
}


map_devices_to_grub()
{
    local LINE DISC DEVICE TARGET REALTARGET
    debug_msg "map_device_to_grub ($@)"
    # TODO - make sure partitions count continuously
    # TODO - check if ide, scsi, md is the correct order
    # TODO - this code doesn't see dev/md devices !!!
    for LINE in $(
        for N in $(ls -d1 /dev/discs/disc*/{disc,part*} 2> /dev/null) ; do
            echo "$(readlink -f $N | sed -e 's/\/dev\/ide/0/g' \
            -e 's/\/dev\/scsi/1/g' -e 's/\/dev\/md/2/g' | \
            sort):$N:$(readlink -f $N)"
        done); do
        DEVICE=$(echo $LINE | cut -d: -f1)
        TARGET=$(echo $LINE | cut -d: -f2)
        REALTARGET=$(echo $LINE | cut -d: -f3)
        if echo $DEVICE | grep -q "disc" ; then
        	(( DISC++ ))
			PART=0
			echo "hd$((DISC-1)):$TARGET:$REALTARGET:"
		else
			(( PART++ ))
        	echo "hd$((DISC-1)),$((PART-1)):$TARGET:$REALTARGET:"
        fi
    done
}


map_device_to_grub()
{
    map_devices_to_grub | grep ":$(readlink -f $1):" | cut -d: -f1
}


map_grub_to_device()
{
	local DEV
	DEV=$(echo "$1" | sed 's/[()]//g')
	unmap_device $((map_devices_to_grub | grep "^$DEV:" | cut -d: -f2) || echo "$1")
}


plugin_kernel_updatebootloader_grub()
{(
	# preferred? - master switch for experienced users
	if [ -n "$BOOTLOADER" -a "$BOOTLOADER" != "grub" ]; then
		return 2
	fi
	debug_msg "plugin_kernel_updatebootloader_grub ($@)"

    # we need to determine $GRUB_ROOT and $GRUB_BOOT, but ONLY when we are
	# not being called from the ISO, in which case we use the provided values
	# this test only checks GRUB_ROOT, because GRUB_BOOT might be empty
	if [ -z "$GRUB_ROOT" ]; then
        # determine if BOOT is a separate partition:
        BOOTPART=$(grep "^/dev/" /etc/mtab | awk '($2 == "/boot"){print $1}')
		# determine what to tell our kernel is the rootfs partition
        ROOTPART=$(grep "^/dev/" /etc/mtab | awk '($2 == "/"){print $1}')
        if [ -n "$BOOTPART" ]; then
            GRUB_BOOT=""
        else
            GRUB_BOOT="/boot"
        fi
        GRUB_ROOT="($(map_device_to_grub $ROOTPART))"
        debug_msg "grub: Using GRUB_BOOT=\"$GRUB_BOOT\""
        debug_msg "grub: Using GRUB_ROOT=\"$GRUB_ROOT\""
	fi

	print_grub_image()
	{
		debug_msg "title   $2"
		debug_msg "kernel  $GRUB_BOOT/$1 root=$(map_grub_to_device $GRUB_ROOT) ro devfs=nomount"
		echo   "title   $2"
		echo   "kernel  $GRUB_BOOT/$1 root=$(map_grub_to_device $GRUB_ROOT) ro devfs=nomount"
		echo   ""
	}

	has_grub_title()
	{
		# really hard way of looking for a kernel label $1
		grep title "$2" | tr '\t' ' ' | tr -s ' ' | cut -d ' ' -f2- | grep -q "^$1$"
	}
	
	add_grub_image()
	{
		if ! has_grub_title "$2" /boot/grub/menu.lst ; then
			print_grub_image "$1" "$2" >> /boot/grub/menu.lst.new
		fi
	 	if [ -f /boot/"$1.old" ] && ! has_grub_title "$2.old" /boot/grub/menu.lst ; then
			print_grub_image "$1.old" "$2.old" >> /boot/grub/menu.lst.new
		fi
	}

	if ! ( has_grub_title "$2" /boot/grub/menu.lst && has_grub_title "$2.old" /boot/grub/menu.lst ) ; then
		export IFS="
"

		rm -rf /boot/grub/menu.lst.new
		cp /boot/grub/menu.lst /boot/grub/menu.lst.old

		(( IMAGE_COUNT=0 ))
		for LINE in $(cat /boot/grub/menu.lst) ; do
			if echo $LINE | grep -q "title" ; then
				# To create a separating line between entries
				echo "" >> /boot/grub/menu.lst.new

				if (( IMAGE_COUNT == 0 )) ; then
					add_grub_image "$1" "$2"
				fi
				(( IMAGE_COUNT++ ))
			fi
			if (( IMAGE_COUNT == 14 )) ; then
				break
			fi
			echo $LINE >> /boot/grub/menu.lst.new
		done

		if (( IMAGE_COUNT == 0 )) ; then
			add_grub_image "$1" "$2"
		fi

		cp /boot/grub/menu.lst.new /boot/grub/menu.lst
	fi

	if query "Edit grub configuration manually ?" n ; then
		edit_file /boot/grub/menu.lst
	fi

    message ""
    message "${MESSAGE_COLOR}Warning: Do not forget to install grub to your MBR${DEFAULT_COLOR}"
    message "${MESSAGE_COLOR}if you have not done so before rebooting.${DEFAULT_COLOR}"
	message ""

	# right now we want to have it run all bootloaders?
	return 2
)}


plugin_register KERNEL_UPDATEBOOTLOADER plugin_kernel_updatebootloader_grub


