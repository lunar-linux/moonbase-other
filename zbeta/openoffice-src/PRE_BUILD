delete_function( )
{
# pass the name and the file that you want the function removed from
# $1 function name
# $2 file name

    #Use awk to yank cheats since we dont have any "}" in the function
    awk 'BEGIN{p=1} /^'"$1"'/{ p=0 } p==1{print $0} p==0 && /^[[:space:]]*}/{p=1}' $2 > $2.tmp
    mv $2.tmp $2
}

LGET ()
{
    #only works in a lunar script as get_url is defined by download.lunar
    # and $SOURCE_CACHE is an internal lunar variable
    get_url $1 $SOURCE_CACHE/`basename $1`
}

unpack_dicts ()
{
    mkdir -p $SOURCE_DIRECTORY/ooo-dicts-lunar/ &&
    for file in $DICT_FILES
    do
        unzip $SOURCE_CACHE/$file -d $SOURCE_DIRECTORY/ooo-dicts-lunar
    done
}

# needs export for BUILD file
export TMP_DICT_LIST="/tmp/lunar_ooo_Dictionary.list"

download_dict_files ()
{
    #function locals
    FUNC_DEPENDS_FILE="$DEPENDS_CONFIG/$MODULE"
    TMP_FILE_LIST="/tmp/lunar_ooo_Files.list"

    #clear vars
    SEL_DICT_FILES=""
    SEL_HYPH_DICT_FILES=""
    SEL_THES_DICT_FILES=""

    lock_file $TMP_DICT_LIST &&
    lock_file $TMP_FILE_LIST &&
    # clear any stale tmp files this is why we lock them :-)
    rm -f $TMP_DICT_LIST     &&
    rm -f $TMP_FILE_LIST     &&
    
    OLD_IFS=$IFS &&
    IFS=";" &&
    # gets the files and builds the proper config files
    for file in $SEL_DICTS
    do
        tmp_file=`grep -h -m1 $file $SOURCE_CACHE/available.lst | cut -d"," -f5`
        SEL_DICTS_FILES="$SEL_DICTS_FILES $tmp_file"
        echo "DICT `grep -h -m1 $file  $SOURCE_CACHE/available.lst | cut -d"," -f 1,2,3 | tr "," " " `" >> $TMP_DICT_LIST
	echo $tmp_file >> $TMP_FILE_LIST
        if [ ! -e $SOURCE_CACHE/$tmp_file ]; then
            LGET "$DICT_URL/$tmp_file"
        fi
    done &&
    for file in $SEL_HYPH_DICTS 
    do
    	tmp_file=`grep -h -m1 $file $SOURCE_CACHE/hyphavail.lst | cut -d"," -f5`
        SEL_HYPH_DICTS_FILES="$SEL_HYPH_DICTS_FILES $tmp_file"
        echo "HYPH `grep -h -m1 $file $SOURCE_CACHE/hyphavail.lst | cut -d"," -f 1,2,3 | tr "," " " `" >> $TMP_DICT_LIST
	echo $tmp_file >> $TMP_FILE_LIST
        if [ ! -e $SOURCE_CACHE/$tmp_file ]; then
            LGET "$DICT_URL/$tmp_file"
        fi
    done &&
    for file in $SEL_THES_DICTS
    do
        tmp_file=`grep -h -m1 $file $SOURCE_CACHE/thesavail.lst | cut -d"," -f5`
        SEL_THES_DICTS_FILES="$SEL_THES_DICTS_FILES $tmp_file"
        echo "THES `grep -h -m1 $file $SOURCE_CACHE/thesavail.lst | cut -d"," -f 1,2,3 | tr "," " " `" >> $TMP_DICT_LIST
	echo $tmp_file >> $TMP_FILE_LIST
        if [ ! -e $SOURCE_CACHE/$tmp_file ]; then
            LGET "$DICT_URL/$tmp_file"
        fi
    done &&
    IFS=$OLD_IFS  &&
   
    #remove any duplicate entries
    sort $TMP_FILE_LIST | uniq > $TMP_FILE_LIST.uniq &&
    mv $TMP_FILE_LIST.uniq $TMP_FILE_LIST &&
    unlock_file $TMP_DICT_LIST &&

    DICT_FILES="" &&
    while read FILE
    do
        DICT_FILES="$DICT_FILES $FILE"
    done < $TMP_FILE_LIST &&

    # We are done with the file list, but we need the DICT list for install
    # in the BUILD file
   # rm -f $TMP_FILE_LIST       &&
    unlock_file $TMP_FILE_LIST &&

    #Add the file listing function to the depends/config file
    lock_file $FUNC_DEPENDS_FILE &&
    delete_function "echo_dict_files" $FUNC_DEPENDS_FILE &&
    echo "echo_dict_files(){" >> $FUNC_DEPENDS_FILE &&
    echo "echo $DICT_FILES"        >> $FUNC_DEPENDS_FILE &&
    echo "}"                  >> $FUNC_DEPENDS_FILE &&
    unlock_file $FUNC_DEPENDS_FILE 
}


(
  default_pre_build              &&
  cd $SOURCE_DIRECTORY           &&
  mkdir -p src                   &&
  cp $SOURCE_CACHE/$SOURCE2 src/ &&
  cp $SOURCE_CACHE/$SOURCE3 src/ &&
  cp $SOURCE_CACHE/$SOURCE4 src/ &&
  unpack $SOURCE8                &&
  patch_it $SOURCE9 0            #&&

#  download_dict_files            &&
#  unpack_dicts
)
